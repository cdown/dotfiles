#!/bin/bash

upgrade_dir=/var/log/upgrades

max_days=2
shambolic_days=7
max_packages=15

shopt -s nullglob

for dir in "$upgrade_dir/$USER"/*; do
    # This is just running through to get the last
    :
done

if [[ -v dir ]]; then
    # shellcheck disable=SC2001
    last_upgrade_epoch=$(date +%s -d "$(sed 's/\(.*\)-/\1 /' <<< "${dir##*/}")")
    acceptable_upgrade_epoch=$(date +%s -d "$max_days days ago")
    shambolic_upgrade_epoch=$(date +%s -d "$shambolic_days days ago")
else
    # No upgrades yet, force one
    last_upgrade_epoch=0
    acceptable_upgrade_epoch=1
    shambolic_upgrade_epoch=1
fi

flagged=0
mapfile -t pkgs < <(packages-to-upgrade)
for pkg in "${pkgs[@]}"; do
    case $pkg in
        google-chrome|linux-lts|linux|openssh|xorg-server)
            notify-send -u critical -- 'Upgrade due' "Critical package '$pkg' is pending upgrade."
            flagged=1
        ;;
    esac
done

if (( flagged )); then
    exit
fi

if (( last_upgrade_epoch < acceptable_upgrade_epoch )); then
    notify-send -u low -- 'Upgrade due' "It looks like you didn't upgrade in the last $max_days days."
    exit
elif (( last_upgrade_epoch < shambolic_upgrade_epoch )); then
    notify-send -u crtitical -- 'Upgrade due' "It looks like you didn't upgrade in the last $shambolic_days days."
    exit
else
    printf 'Not notifying for time basis, last upgrade epoch is only %d but we need before %d\n' "$last_upgrade_epoch" "$acceptable_upgrade_epoch" >&2
fi

num_packages=${#pkgs[@]}

if (( num_packages > max_packages )); then
    notify-send -u low -- 'Upgrade due' "More than $max_packages packages are pending upgrade."
else
    printf 'Not notifying for packages basis, pending upgrade for %d packages but we need at least %d\n' "$num_packages" "$max_packages" >&2
fi
