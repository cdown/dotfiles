#!/bin/bash -xe

cd

if ! (( UID )); then
    echo "Please don't run this as root, things will break :-)" >&2
    exit 1
fi

log_dir=/var/log/upgrades/$USER
name=$(LC_ALL=C date +%F-%T.%N)
log_file=$log_dir/$name
ansible_type_file=/.ansibletype

if [[ -f $ansible_type_file ]]; then
    read -r ansible_type < "$ansible_type_file"
else
    echo "WARNING: ansible type unset, guessing based on whether in X"
    if [[ $DISPLAY ]]; then
        ansible_type=desktop
    else
        ansible_type=server
    fi
    sudo tee <<< "$ansible_type" > /dev/null /.ansibletype
fi

sudo mkdir -p -m0700 "$log_dir"
sudo chown "$USER" "$log_dir"

if ! [[ -v TMUX ]]; then
    exec tmux new-session -s upgrade -- script -c "$0" "$log_file"
else
    session=$(tmux display-message -p '#S')
    tmux set-option -t "$session" remain-on-exit 1
fi

# /boot is not on btrfs root. Copy its contents to / so it will be included in
# the snapshot.
sudo mkdir -p /bootcopy
sudo rsync -avHA /boot/ /bootcopy/

if ! (( UPDATED_DOTFILES )); then
    root_fs=$(df --output=fstype / | tail -1)
    case $root_fs in
        btrfs)
            btrfs-snap / "upgrade-$name"

            # only keep 3 newest upgrade snapshots
            sudo btrfs subvolume list /snapshots/ |
                awk '$NF ~ /\/upgrade-/ { print "/" $NF }' |
                sort -r | tail -n +4 |
                xargs -r -d '\n' sudo btrfs subvolume delete -v
        ;;
        *)
            echo "WARNING: not creating btrfs snapshot as fs is not btrfs (it's $root_fs)" >&2
            sleep 5
        ;;
    esac

    for user in cdown lin root; do
        # Don't break agent connection if this is the current user
        if [[ $USER == "$user" ]]; then
            escalation_cmd=()
        else
            escalation_cmd=(sudo -i -u "$user")
        fi

        # If we aren't using git://, we would would need an agent connection
        if (( ${#escalation_cmd[@]} == 0 )) || "${escalation_cmd[@]}" bash -c 'cd git/dotfiles && git remote -v | grep -q git://'; then
            "${escalation_cmd[@]}" bin/update-dotfiles
        fi

        if [[ "$user" != root ]]; then
            # root doesn't have envs, only dotfiles
            "${escalation_cmd[@]}" bin/upgrade-envs
        fi
    done

    UPDATED_DOTFILES=1 exec "$0"
fi

# These will be removed in the next step if they are orphans.
pkgs=$(find-possibly-manually-installed-packages "$ansible_type")

if [[ $pkgs ]]; then
    printf 'Will mark the following packages --asdeps: %s\nOk? (y/n) ' "$pkgs"
    read -r REPLY
    [[ $REPLY == y ]] || exit 1
    # All packages are spit by IFS.
    # shellcheck disable=SC2046
    sudo pacman -D --asdeps $pkgs
fi

while pkgs=$(pacman -Qqtd); do
    # All packages are spit by IFS.
    # shellcheck disable=SC2086
    sudo pacman -Rns $pkgs
done

mapfile -t unowned < <(find-unowned-in-usr-bin)
(( "${#unowned[@]}" )) && sudo rm -i "${unowned[@]}"

if command -v yay >/dev/null 2>&1; then
    sudo -u makepkg yay --noconfirm --cleanafter -Syu
else
    sudo pacman --noconfirm -Syu
fi

sudo rm -f /etc/pacman.d/mirrorlist.pacnew /etc/locale.{conf,gen}.pacnew /etc/pulse/default.pa.pacnew /etc/pacman.conf.pacnew
sudo pacdiff

sudo update-from-cm "$ansible_type"
